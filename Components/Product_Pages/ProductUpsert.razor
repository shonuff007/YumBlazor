@page "/product/create"
@page "/product/update/{Id:int}"   

@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment _webHostEnvironment
@inject IJSRuntime _JS

@if (IsProcessing)
{

    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="loading" />
    </div>

}
else
{

    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id == 0 ? "Create" : "Update") Product</h2>"
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Product" FormName="ProductUpsertForm" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText type="text" class="form-control" id="Name" @bind-Value="Product.Name" placeholder="Name" />
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(() => Product.Name)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText type="text" class="form-control" id="Description" @bind-Value="Product.Description" placeholder="Description" />
                        <label for="Description">Description</label>
                        <ValidationMessage For="@(() => Product.Description)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputText type="text" class="form-control" id="SpecialTag" @bind-Value="Product.SpecialTag" placeholder="SpecialTag" />
                        <label for="SpecialTag">Special Tag</label>
                        <ValidationMessage For="@(() => Product.SpecialTag)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="Product.Price" class="form-control" id="Price" placeholder="Price" />
                        <label for="Price">Price</label>
                        <ValidationMessage For="@(() => Product.Price)" />  
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputSelect  class="form-select" id="Category" @bind-Value="Product.CategoryId" placeholder="Category">

                            <option value="0" disabled selected>--Select Category--</option>
                            @foreach (var category in _categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <label for="Category">Category</label>
                        <ValidationMessage For="@(() => Product.CategoryId)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        @if (string.IsNullOrEmpty(Product.ImageUrl))
                        {
                            <InputFile OnChange="LoadFiles" class="form-control pb-3" id="customFile" accept="image/x-png,image/jpeg">

                            </InputFile>
                            <label for="customFile">Upload image</label>
                        }

                        @if (!string.IsNullOrEmpty(Product.ImageUrl))
                        {
                            <div class="row">
                                <div class="col-3">
                                    <img src="@Product.ImageUrl" alt="Product Image" class="img-thumbnail" />
                                </div>
                                <div class="col-9">
                                    <i class="bi bi-trash btn btn-outline-danger" @onclick="DeleteImage">Remove</i>
                                </div>
                            </div>
                        }

                    </div>

                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            @if(Id > 0){
                                <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing" style="width:100%;">
                                    <i class='bi bi-floppy2'></i> Update
                                </button>
                            }else{
                                <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing" style="width:100%;">
                                    <i class="bi bi-plus-square"></i> Create
                                </button>
                            }
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="product" class="btn btn-secondary form-control" disabled="@IsProcessing" style="width:100%;">
                                <i class="bi bi-arrow-bar-left"></i>Back to List
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>

        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; } 

    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();

    private IEnumerable<Category> _categories = new List<Category>();
    private string? _directoryPath { get; set; }
    private bool _isImageLaoding { get; set; } = false;
    private bool IsProcessing { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAndCategoryList();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductAndCategoryList()
    {
        if (Id > 0)
        {
            Product = await _productRepository.GetAsync(Id);
        }
        _categories = await _categoryRepository.GetAllAsync();
    }

    private async Task UpsertProduct()
    {
        IsProcessing = true;
        if (Product.Id == 0)
        {
            // Create Product
            await _productRepository.CreateAsync(Product);
            await _JS.ToastrSuccess("Product Create Successfully");
        }
        else
        {
            // Update Product
            await _productRepository.UpdateAsync(Product);
            await _JS.ToastrSuccess("Product UpDated Successfully");
        }

        IsProcessing = false;

        NavigationManager.NavigateTo("product");
    }


    protected override Task OnInitializedAsync()
    {
        _directoryPath = Path.Combine(_webHostEnvironment.WebRootPath, "images", "product");
        return base.OnInitializedAsync();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {

        IsProcessing = true;

        var file = e.File;
        FileInfo fileInfo = new(file.Name);
        var newFileName = $"{Guid.NewGuid()}.{fileInfo.Extension}";

        if(!Directory.Exists(_directoryPath))
        {
            Directory.CreateDirectory(_directoryPath);
        }

        var path = Path.Combine(_directoryPath, newFileName);
        await using FileStream fileStream = new FileStream(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);
        Product.ImageUrl = $"/images/product/{newFileName}"; 

        IsProcessing = false;
    }

    void DeleteImage()
    {
        if (Product.ImageUrl == null || string.IsNullOrEmpty(Product.ImageUrl)) return;

        var filePathToDelete = Product.ImageUrl.Split("/").Reverse().First();
        var filePathToDeleteImage = Path.Combine(_directoryPath, filePathToDelete);
        if (!File.Exists(filePathToDeleteImage)) return;

        File.Delete(filePathToDeleteImage); 
        Product.ImageUrl = null;

        return;
    }
}
